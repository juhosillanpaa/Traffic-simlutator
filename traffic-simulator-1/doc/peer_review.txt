# Review form for project XXX

Name of project to be reviewed: traffic-simulator-1

Names of reviewers: Joni Tarkiainen, Elias Kosama, Kaisa Kärkkäinen, Rasmus Pekkarinen

Provide short comments (2-4 sentences) for each item below.

## 1. Overall design and functionality (0-6p)

 * 1.1: The implementation corresponds to the selected topic and
scope. The extent of project is large enough to accommodate work for
everyone (2p)

According to the project plan this statement is true. There should be enough work for everyone especially if some of the additional/advanced features are developed.

 * 1.2: The software structure is appropriate, clear and well
documented. e.g. class structure is justified, inheritance used where
appropriate, information hiding is implemented as appropriate. (2p)

Structure is clear and thought out. Some documentation about why certain things have been done some way could be written.

 * 1.3: Use of external libraries is justified and well documented. (2p)

External have not been used yet.


## 2. Working practices (0-6p)

 * 2.1: Git is used appropriately (e.g., commits are logical and
frequent enough, commit logs are descriptive). (2 p)

Commits are regular and descriptive. Done logically.

 * 2.2: Work is distributed and organised well. Everyone contributes to
the project and has a relevant role that matches his/her skills. The
distribution of roles is described well enough. (2p)

Only 2 persons have committed to the project. Roles haven’t been decided clearly. There isn’t much to evaluate.

 * 2.3: Quality assurance is appropriate. Implementation is tested
comprehensively and those testing principles are well documented. (2p)

All things that have been implemented have been tested. Human, intersections and vehicles are the classes that have been implemented. They have been documented well.

## 3. Implementation aspects (0-8p)

 * 3.1: Building the software is easy and well documented. CMake or
such tool is highly recommended. (2p)

Instructions for building the software hasn’t been documented yet. 

 * 3.2: Memory management is robust, well-organised and
coherent. E.g., smart pointers are used where appropriate or RO3/5 is
followed. The memory management practices should be documented. (2p)

Memory management has not been implemented.

 * 3.3: C++ standard library is used where appropriate. For example,
containers are used instead of own solutions where it makes sense. (2
p)

The standard library has been used appropriately. Code uses mostly containers for everything reasonable.

 * 3.4: Implementation works robustly also in exceptional
situations. E.g., functions can survive invalid inputs and exception
handling is used where appropriate. (2p)


Nothing related to user inputs have been implemented yet.

## 4. Project extensiveness (0-10p)

 * Project contains features beyond the minimal requirements: Most of
the projects list additional features which can be implemented for
more points. Teams can also suggest their own custom features, though
they have to be in the scope of the project and approved by the course
assistant who is overseeing the project. (0-10p)


All the additional features are planned to be implemented. Those being GUI for road and analysis, traffic management with speed limits, traffic signs and traffic lights. Building profiles for people and cars. Passenger profiles for where and when they work and do hobbies have been implemented. Advanced features aren’t planned to be implemented.